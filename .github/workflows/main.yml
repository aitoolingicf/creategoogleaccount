name: Deploy to Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: gws-automation
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8
    
    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 main.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all errors as warnings
        flake8 main.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test configuration loading
      run: |
        python -c "
        import os
        os.environ['DOMAIN'] = 'test.org'
        os.environ['EMAIL_USER'] = 'test@test.org'  
        os.environ['EMAIL_PASSWORD'] = 'test'
        os.environ['ADMIN_EMAIL'] = 'admin@test.org'
        os.environ['AUTHORIZED_EMAILS'] = 'test@test.org'
        os.environ['GOOGLE_SERVICE_ACCOUNT_JSON'] = '{\"type\": \"service_account\"}'
        
        from main import Config
        config = Config()
        print('‚úÖ Configuration loads successfully')
        "

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      id-token: write

    steps:
    - uses: actions/checkout@v3

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: 'Configure Docker for GCR'
      run: gcloud auth configure-docker

    - name: 'Build Docker image'
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        docker tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

    - name: 'Push Docker image'
      run: |
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

    - name: 'Deploy to Cloud Run'
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --memory 512Mi \
          --cpu 1 \
          --timeout 540 \
          --max-instances 1 \
          --set-env-vars="DOMAIN=${{ secrets.DOMAIN }}" \
          --set-env-vars="EMAIL_USER=${{ secrets.EMAIL_USER }}" \
          --set-env-vars="EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" \
          --set-env-vars="AUTHORIZED_EMAILS=${{ secrets.AUTHORIZED_EMAILS }}" \
          --set-env-vars="ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" \
          --set-env-vars="GOOGLE_SERVICE_ACCOUNT_JSON=${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}"

    - name: 'Update Cloud Scheduler (if exists)'
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --platform managed --region $REGION --format 'value(status.url)')
        
        # Check if scheduler job exists, create or update
        if gcloud scheduler jobs describe gws-automation-trigger --location=$REGION &>/dev/null; then
          echo "Updating existing scheduler job"
          gcloud scheduler jobs update http gws-automation-trigger \
            --location=$REGION \
            --schedule="*/5 * * * *" \
            --uri="$SERVICE_URL" \
            --http-method=POST
        else
          echo "Creating new scheduler job"
          gcloud scheduler jobs create http gws-automation-trigger \
            --location=$REGION \
            --schedule="*/5 * * * *" \
            --uri="$SERVICE_URL" \
            --http-method=POST
        fi

    - name: 'Output deployment info'
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --platform managed --region $REGION --format 'value(status.url)')
        echo "üöÄ Service deployed successfully!"
        echo "üìç Service URL: $SERVICE_URL"
        echo "‚è∞ Scheduler: Runs every 5 minutes"
        echo "üìß Monitoring: Check Cloud Run logs for activity"
